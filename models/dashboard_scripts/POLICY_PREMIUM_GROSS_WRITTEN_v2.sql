{{ config(materialized='table') }}

SELECT
--	CASE 
--		WHEN pm."TYPE" ='renew' THEN Date(convert_timezone('America/New_York', to_timestamp_tz(pm.EFFECTIVE_TIMESTAMP/1000)))
--		ELSE Date(convert_timezone('America/New_York', to_timestamp_tz(p.ISSUED_TIMESTAMP /1000)))
--	END
--	 AS REPORT_DATE,
	dpd.POLICY_ISSUED_DATE AS REPORT_DATE, 
--	Date(convert_timezone('America/New_York', to_timestamp_tz(p.ISSUED_TIMESTAMP /1000))) AS ISSUED_DATE,
	dpd.POLICY_ISSUED_DATE AS ISSUED_DATE,
--	Date(convert_timezone('America/New_York', to_timestamp_tz(p.POLICY_START_TIMESTAMP/1000))) AS POLICY_START_DATE,
--	Date(convert_timezone('America/New_York', to_timestamp_tz(p.POLICY_END_TIMESTAMP/1000))) AS POLICY_END_DATE,
	dpd.POLICY_START_DATE AS POLICY_START_DATE,
	dpd.POLICY_END_DATE AS POLICY_END_DATE,
	Date(convert_timezone('America/New_York', to_timestamp_tz(pc.START_TIMESTAMP/1000))) AS PERIL_START_DATE,
	Date(convert_timezone('America/New_York', to_timestamp_tz(pc.END_TIMESTAMP /1000))) AS PERIL_END_DATE,
	Date(convert_timezone('America/New_York', to_timestamp_tz(pc.REPLACED_TIMESTAMP /1000))) AS REPLACED_DATE,
	dpd.CANCELLATION_DATE as CANCELLATION_DATE,
	dpd.CANCELLATION_REASON AS CANCELLATION_REASON,
--	CASE 
--		WHEN pm."TYPE" ='cancel' THEN Date(convert_timezone('America/New_York', to_timestamp_tz(pm.ISSUED_TIMESTAMP/1000)))
--		ELSE NULL
--	END
--	 AS CANCELLATION_DATE,
--	CASE 
--		WHEN pm."TYPE" ='renew' THEN Date(convert_timezone('America/New_York', to_timestamp_tz(pm.EFFECTIVE_TIMESTAMP/1000)))
--		ELSE NULL
--	END
--	 AS RENEWAL_DATE,
	NULL AS RENEWAL_DATE,
	p.POLICYHOLDER_LOCATOR,
	pc.POLICY_LOCATOR,
	ex."LOCATOR"  AS EXPOSURE_LOCATOR,
	pc.EXPOSURE_CHARACTERISTICS_LOCATOR,
	pc."LOCATOR" AS PERIL_CHARACTERISTIC_LOCATOR,
	pc.REPLACEMENT_OF_LOCATOR AS REPLACEMENT_OF_PERIL_CHARACTERISTIC_LOCATOR,
	pc.PERIL_LOCATOR,
	p.PAYMENT_SCHEDULE_NAME,
	p.PRODUCT_NAME, 
	pe."NAME" AS PERIL_NAME,
	ex."NAME" AS EXPOSURE_NAME,
	pm."LOCATOR",
	pm."TYPE",
	Date(convert_timezone('America/New_York', to_timestamp_tz(pm.ISSUED_TIMESTAMP /1000))) AS cancellation_DATE_temp,
	(CASE WHEN pc.REPLACED_TIMESTAMP IS NULL AND Date(convert_timezone('America/New_York', to_timestamp_tz(pm.ISSUED_TIMESTAMP /1000)))=dpd.CANCELLATION_DATE THEN 1 ELSE 0 END) AS test_flag,
	CASE WHEN pc.REPLACED_TIMESTAMP IS NULL THEN 0 ELSE 1 END AS REPLACEMENT_FLAG,
--	CASE WHEN p.CANCELLATION_TIMESTAMP IS NULL THEN 0 ELSE 1 END AS CANCELLATION_FLAG,
	CASE WHEN dpd.CANCELLATION_DATE IS NOT NULL THEN 1 ELSE 0 END AS CANCELLATION_FLAG,
--	CASE WHEN pm."TYPE" ='renew' THEN 1 ELSE 0 END AS RENEWAL_FLAG,
	CASE WHEN dpd.new_renew='Renew' THEN 1 ELSE 0 END AS RENEWAL_FLAG,	
	sum(pc.PREMIUM) AS TOTAL_PREMIUM_WITH_REPLACED_AMOUNT,
	sum(CASE WHEN pc.REPLACED_TIMESTAMP IS NULL THEN pc.PREMIUM ELSE 0 END) AS GROSS_WRITTEN_PREMIUM_AMOUNT,
	sum(CASE WHEN pc.REPLACED_TIMESTAMP IS NULL AND Date(convert_timezone('America/New_York', to_timestamp_tz(pm.ISSUED_TIMESTAMP /1000)))=dpd.CANCELLATION_DATE THEN COALESCE(pc.PREMIUM,0)-COALESCE(pc_previous.PREMIUM,pc.PREMIUM) ELSE 0 END) AS GROSS_WRITTEN_PREMIUM_AMOUNT_CHANGE,
	sum(0) AS EARNED_PREMIUM_AMOUNT
FROM MYSQL_DATA_MART_10001.PERIL_CHARACTERISTICS pc
LEFT JOIN MYSQL_DATA_MART_10001.PERIL_CHARACTERISTICS pc_previous
ON pc.REPLACEMENT_OF_LOCATOR =pc_previous.LOCATOR 
LEFT JOIN MYSQL_DATA_MART_10001.POLICY  p
ON pc.POLICY_LOCATOR  = p.LOCATOR
LEFT JOIN MYSQL_DATA_MART_10001.PERIL AS pe
ON pc.PERIL_LOCATOR =pe.LOCATOR
LEFT JOIN MYSQL_DATA_MART_10001.EXPOSURE AS ex
ON pe.EXPOSURE_LOCATOR =ex."LOCATOR" 
LEFT JOIN MYSQL_DATA_MART_10001.policy_modification as pm
ON pc.policy_modification_locator = pm.LOCATOR
LEFT JOIN {{ ref('DIM_POLICY_DURATION') }}  AS dpd
ON pc.POLICY_LOCATOR = dpd.POLICY_LOCATOR 
AND (Date(convert_timezone('America/New_York', to_timestamp_tz(pm.EFFECTIVE_TIMESTAMP/1000))) BETWEEN dpd.policy_start_date_min_issued_effective_date AND dpd.POLICY_END_DATE )
WHERE p.ISSUED_TIMESTAMP IS NOT NULL 
--AND pc.PREMIUM<>0
AND pc.REPLACED_TIMESTAMP IS null
AND Date(convert_timezone('America/New_York', to_timestamp_tz(pm.EFFECTIVE_TIMESTAMP/1000))) >='2022-01-01'
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28
ORDER BY 1,4,5